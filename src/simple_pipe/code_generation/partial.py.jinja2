
{% for i in range(1, num_args + 1) %}
@overload
def partial{{ num_args }}(func: Callable[[{% for j in range(1, num_args + 1) %}A{{ j }}{{ ", " if not loop.last }}{% endfor %}], R], 
    {%- for j in range(1, num_args + 1) %}
    {%- if j == i %}
    arg{{ j }}: Any = EMPTY{{ "," if not loop.last }}
    {%- else %}
    arg{{ j }}: A{{ j }} = None{{ "," if not loop.last }}
    {%- endif %}
    {%- endfor %}) -> Callable[[A{{ i }}], R]: ...

{% endfor %}

def partial{{ num_args }}( # pyright: ignore [reportInconsistentOverload]
    func: Callable[[{% for i in range(1, num_args + 1) %}A{{ i }}{{ "," if not loop.last }}{% endfor %}], R], 
    {%- for i in range(1, num_args + 1) %}
    arg{{ i }}=EMPTY{{ "," if not loop.last }}
    {%- endfor %}):
    """
    Partially apply a function.

    Takes in a function and all but one of its arguments to bind to the function.
    Returns a function with a single free argument.
    """{% for combo in combinations %}
    if ({% for arg in combo %}arg{{ arg }} is not EMPTY{% if not loop.last %}
        and {% endif %}{% endfor %}):
        return lambda free_arg: func({{ function_args(combo, num_args) }})  # pyright: ignore [reportArgumentType]
{% endfor %}
    raise ValueError("Couldn't bind provided function to provided arguments.")

